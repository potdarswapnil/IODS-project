source("C:\\Swapnil\\R\\qc2pdf.r")
options(java.parameters = "-Xmx6g")
require(gridExtra)
library(reshape2)
library(xlsx)
library(plyr)
source("C:\\Swapnil\\R\\qc2pdf.r")
setwd("C:\\Swapnil\\DSRT_Pipeline\\Piia\\Results_Astrid_H91661")
ecpframe= read.xlsx2("..\\Annotations\\161104_H9X084-S3-U7_1661 Astrid 52 drugs Annotations.xlsx", 1,colIndex=1:5, as.data.frame=TRUE, header=TRUE, colClasses=NA,stringsAsFactors =FALSE)
save(ecpframe,file ="ecpframe.rda")
#Plate	DWell	ProductId	ProductName	Concentration	DRow	Column	Row
#1	A1	empty	empty	0	A	1	1
#name  cell line	drug	conc (nM)	solvent	layout	src plate	src well	dest plate	DWell	volume	rand	running number
file_names <- list.files("..\\Data_Astrid_H91661_20170211",pattern = ".xlsx$", all.files = TRUE,full.names = TRUE, recursive = TRUE,ignore.case = TRUE, include.dirs = TRUE)
file_names
file_name="..\\Data_Astrid_H91661_20170211/CC_19_fibro_p3_H91661-01-10CTG.xlsx"
tbl_dataframe= xlsx::read.xlsx(file_name, 1, startRow=1,endRow=65, colIndex= 1:25,as.data.frame=TRUE, header=FALSE, colClasses=NA,stringsAsFactors=FALSE)
rowstart=grep("Raw Data",tbl_dataframe[,2])
rowstart=rowstart + 2
rowend=rowstart + 15
rawdatamat = data.matrix(tbl_dataframe[rowstart:rowend,2:25])
rownames(rawdatamat) <- LETTERS[1:16]
colnames(rawdatamat) <- 1:24
barcodec=grep("ID1: ",tbl_dataframe)
barcoder=grep("ID1: ",tbl_dataframe[,barcodec])
barcode=unlist(strsplit(tbl_dataframe[barcoder,barcodec], ": "))[2]
plate_id=split_give_last_n(file_name,"/",1)
plate_id=remove_file_extension(plate_id)
readout=ifelse(grepl("CTX",plate_id),"CTX","CTG")
barcode=paste0(barcode,"_",readout)
barcode
Screen_Name=split_remove_last_n(plate_id,"_",1)
Screen_Name=paste0(Screen_Name,"_",readout)
#Plate=as.numeric(substrRight(plate_id,1))
Plate=1
data_tbl <- melt(rawdatamat)
colnames(data_tbl) <- c("Row","Column","well_signal")
data_tbl$Row=as.character(data_tbl$Row)
data_tbl$NRow=match(data_tbl$Row, LETTERS)
data_tbl$DWell <- paste(data_tbl[,1],data_tbl[,2],sep="")
data_tbl$Screen_Name=Screen_Name
data_tbl$Plate=Plate
data_tbl$Barcode=barcode
ecp_plate=ecpframe[ecpframe$Plate==Plate,]
ecp_combined <- merge(data_tbl,ecp_plate,by=c("DWell","Plate"))
head(ecp_combined)
pos_data <- ecp_combined$well_signal[ecp_combined$ProductName %in% c("Q_DEATH_1","pos","POS","BzCl")]
neg_data <- ecp_combined$well_signal[ecp_combined$ProductName %in% c("DMSO","dmso","miR2","neg")]
print(file_name)
print("Pos: BzCl")
print(pos_data)
print(mean(pos_data))
print(median(pos_data))
print("DMSO: DMSO")
print(neg_data)
print(mean(neg_data))
print(median(neg_data))
avg_low <- median(pos_data,na.rm=TRUE)
avg_high <- median(neg_data,na.rm=TRUE)
ecp_combined$percent_inhibition <- round(((avg_high - ecp_combined$well_signal)/(avg_high - avg_low))*100,1)
ecp_combined
source('C:/Swapnil/DSRT_Pipeline/Piia/Code/Raw_Data_Processing_Master.r')
source('C:/Swapnil/DSRT_Pipeline/Piia/Code/Plots_Raw_Data.R')
source('C:/Swapnil/DSRT_Pipeline/Shady/Code/Raw_Data_Processing.r')
source('C:/Swapnil/DSRT_Pipeline/Shady/Code/Raw_Data_Processing.r')
source('C:/Swapnil/DSRT_Pipeline/Shady/Code/Plots.R')
source('C:/Swapnil/DSRT_Pipeline/Shady/Code/Raw_Data_Processing.r')
source('C:/Swapnil/DSRT_Pipeline/Shady/Code/Plots.R')
library(MASS)
library(reshape2)
library(ggplot2)
library(GGally)
data("Boston")
data("Boston")
str(Boston)
install.packages("tidyverse")
install.packages("corrplot")
lda.fit <- lda(crime ~ ., data = train)
lda.fit
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, labels = c("low", "med_low", "med_high", "high"), include.lowest = TRUE)
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
summary(boston_scaled)
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, labels = c("low", "med_low", "med_high", "high"), include.lowest = TRUE)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.fit <- lda(crime ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
source('C:/Swapnil/GitHub/IODS-project/data/create_human.R')
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = ")..")
humandev <- rename(hd, HDIRank = HDI.Rank, Country = Country, HDI = Human.Development.Index..HDI. , LifeExpectancy = Life.Expectancy.at.Birth , ExpectedEducation= Expected.Years.of.Education , Education = Mean.Years.of.Education , GNI = Gross.National.Income..GNI..per.Capita , GNI_HDI =GNI.per.Capita.Rank.Minus.HDI.Rank )
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = ")..")
head(hd)
humandev <- rename(hd, HDIRank = HDI.Rank, Country = Country, HDI = Human.Development.Index..HDI. , Life.Expectancy = Life.Expectancy.at.Birth , Expected.Education= Expected.Years.of.Education , Education = Mean.Years.of.Education , GNI = Gross.National.Income..GNI..per.Capita , GNI.HDI =GNI.per.Capita.Rank.Minus.HDI.Rank )
dim(humandev)
str(humandev)
humandev <- rename(hd, HDI.Rank = HDI.Rank, Country = Country, HDI = Human.Development.Index..HDI. , Life.Expectancy = Life.Expectancy.at.Birth , Expected.Education= Expected.Years.of.Education , Education = Mean.Years.of.Education , GNI = Gross.National.Income..GNI..per.Capita , GNI.HDI =GNI.per.Capita.Rank.Minus.HDI.Rank )
dim(humandev)
str(humandev)
gender <- mutate(gii, GIIRank = as.integer(GII.Rank),
GII= as.numeric(Gender.Inequality.Index..GII.),
Mort = as.numeric(Maternal.Mortality.Ratio),
BR = as.numeric(Adolescent.Birth.Rate),
Rep = as.numeric(Percent.Representation.in.Parliament),
EduF = as.numeric(Population.with.Secondary.Education..Female.),
EduM = as.numeric(Population.with.Secondary.Education..Male.),
LabF = as.numeric(Labour.Force.Participation.Rate..Female.) ,
LabM = as.numeric(Labour.Force.Participation.Rate..Male.))
gender <- select(gender, one_of(c("GIIRank","Country","GII","Mort","BR","Rep","EduF","EduM","LabF","LabM")))
gender <- mutate(gender, LabRatio = LabF / LabM, EduRatio = EduF / EduM)
dim(gender)
str(gender)
source('C:/Swapnil/GitHub/IODS-project/data/create_human.R')
human <- inner_join(humandev,gender,by= "Country")
source('C:/Swapnil/GitHub/IODS-project/data/create_human.R')
source('C:/Swapnil/GitHub/IODS-project/data/create_human.R')
getwd()
setwd("C:/Swapnil/GitHub/IODS-project/data")
source('C:/Swapnil/GitHub/IODS-project/data/create_human.R')
source('C:/Swapnil/GitHub/IODS-project/data/create_human.R')
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km <-kmeans(dist_eu, centers = 3)
km$cluster
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km <-kmeans(dist_eu, centers = 5)
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km2 <-kmeans(dist_eu, centers = 5)
lda.fit2 <- lda(clusters ~ ., data =km2)
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km2 <- kmeans(dist_eu, centers = 5)
lda.fit2 <- lda(clusters ~ ., data =km2)
lda.fit2 <- lda(cluster ~ ., data =km2)
head(km2)
boston_scaled$cluster <- km2$cluster
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km2 <- kmeans(dist_eu, centers = 5)
boston_scaled$cluster <- km2$cluster
lda.fit2 <- lda(cluster ~ ., data =boston_scaled)
```{r}
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km2 <- kmeans(dist_eu, centers = 5)
boston_scaled$cl <- km2$cluster
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km2 <- kmeans(dist_eu, centers = 5)
boston_scaled$cl <- km2$cluster
head()
head(boston_scaled)
set.seed(123)
data("Boston")
boston_scaled <- scale(Boston, center = TRUE, scale = TRUE)
dist_eu <- dist(boston_scaled, method = "euclidean")
km2 <- kmeans(dist_eu, centers = 5)
boston_scaled$cl <- km2$cluster
head(km2)
cbind(boston_scaled, newColumn = km2$cluster)
set.seed(123)
data("Boston")
boston_scaled2 <- as.data.frame(scale(Boston, center = TRUE, scale = TRUE))
dist_eu2 <- dist(boston_scaled2, method = "euclidean")
km2 <- kmeans(dist_eu2, centers = 5)
#cbind(boston_scaled, newColumn = km2$cluster)
boston_scaled2$cluster <- km2$cluster
lda.fit2 <- lda(cluster ~ ., data =boston_scaled2)
plot(lda.fit2, col=as.numeric(bs2$cl), dimen=2)
lda.arrows(lda.fit2, myscale = 3, col = "#666666")
plot(lda.fit2, col=as.numeric(boston_scaled2$clusterl), dimen=2)
lda.arrows(lda.fit2, myscale = 3, col = "#666666")
plot(lda.fit2, col=as.numeric(boston_scaled2$clusterl), dimen=2)
lda.arrows(lda.fit2, myscale = 3, col = "#666666")
plot(lda.fit2, col=as.numeric(boston_scaled2$clusterl), dimen=2)
lda.arrows(lda.fit2, myscale = 3, col = "#666666")
plot(lda.fit2, col=as.numeric(boston_scaled2$cluster), dimen=2)
lda.arrows(lda.fit2, myscale = 3, col = "#666666")
model_predictors <- dplyr::select(train, -crim)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=train$crim)
model_predictors <- dplyr::select(train, -crim)
str(v)
str(train)
model_predictors <- dplyr::select(train, -crime)
model_predictors <- dplyr::select(train, -crime)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=train$crime)
train$cluster <- boston_scaled2$cluster[match(rownames(train), rownames(boston_scaled2))]
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=as.factor(train$cluster))
